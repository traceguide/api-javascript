// Declare crouton_thrift to make the source ES6 compliant
var crouton_thrift = {};
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof crouton_thrift === 'undefined') {
  crouton_thrift = {};
}
crouton_thrift.KeyValue = module.exports.KeyValue = function(args) {
  this.Key = null;
  this.Value = null;
  if (args) {
    if (args.Key !== undefined) {
      this.Key = args.Key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Key is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.KeyValue.prototype = {};
crouton_thrift.KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.Key !== null && this.Key !== undefined) {
    output.writeFieldBegin('Key', Thrift.Type.STRING, 1);
    output.writeString(this.Key);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.STRING, 2);
    output.writeString(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.NamedCounter = module.exports.NamedCounter = function(args) {
  this.Name = null;
  this.Value = null;
  if (args) {
    if (args.Name !== undefined) {
      this.Name = args.Name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Name is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.NamedCounter.prototype = {};
crouton_thrift.NamedCounter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.Value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.NamedCounter.prototype.write = function(output) {
  output.writeStructBegin('NamedCounter');
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 1);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.I64, 2);
    output.writeI64(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Runtime = module.exports.Runtime = function(args) {
  this.guid = null;
  this.start_micros = null;
  this.group_name = null;
  this.attrs = null;
  if (args) {
    if (args.guid !== undefined) {
      this.guid = args.guid;
    }
    if (args.start_micros !== undefined) {
      this.start_micros = args.start_micros;
    }
    if (args.group_name !== undefined) {
      this.group_name = args.group_name;
    }
    if (args.attrs !== undefined) {
      this.attrs = args.attrs;
    }
  }
};
crouton_thrift.Runtime.prototype = {};
crouton_thrift.Runtime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.group_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.attrs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.KeyValue();
          elem6.read(input);
          this.attrs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Runtime.prototype.write = function(output) {
  output.writeStructBegin('Runtime');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeString(this.guid);
    output.writeFieldEnd();
  }
  if (this.start_micros !== null && this.start_micros !== undefined) {
    output.writeFieldBegin('start_micros', Thrift.Type.I64, 2);
    output.writeI64(this.start_micros);
    output.writeFieldEnd();
  }
  if (this.group_name !== null && this.group_name !== undefined) {
    output.writeFieldBegin('group_name', Thrift.Type.STRING, 3);
    output.writeString(this.group_name);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.attrs.length);
    for (var iter7 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(iter7))
      {
        iter7 = this.attrs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.LogRecord = module.exports.LogRecord = function(args) {
  this.timestamp_micros = null;
  this.runtime_guid = null;
  this.span_guid = null;
  this.stable_name = null;
  this.message = null;
  this.level = null;
  this.thread_id = null;
  this.filename = null;
  this.line_number = null;
  this.stack_frames = null;
  this.payload_json = null;
  this.error_flag = null;
  if (args) {
    if (args.timestamp_micros !== undefined) {
      this.timestamp_micros = args.timestamp_micros;
    }
    if (args.runtime_guid !== undefined) {
      this.runtime_guid = args.runtime_guid;
    }
    if (args.span_guid !== undefined) {
      this.span_guid = args.span_guid;
    }
    if (args.stable_name !== undefined) {
      this.stable_name = args.stable_name;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.thread_id !== undefined) {
      this.thread_id = args.thread_id;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.line_number !== undefined) {
      this.line_number = args.line_number;
    }
    if (args.stack_frames !== undefined) {
      this.stack_frames = args.stack_frames;
    }
    if (args.payload_json !== undefined) {
      this.payload_json = args.payload_json;
    }
    if (args.error_flag !== undefined) {
      this.error_flag = args.error_flag;
    }
  }
};
crouton_thrift.LogRecord.prototype = {};
crouton_thrift.LogRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runtime_guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.span_guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stable_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.level = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.thread_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.line_number = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.stack_frames = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.stack_frames.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.payload_json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.error_flag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.LogRecord.prototype.write = function(output) {
  output.writeStructBegin('LogRecord');
  if (this.timestamp_micros !== null && this.timestamp_micros !== undefined) {
    output.writeFieldBegin('timestamp_micros', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp_micros);
    output.writeFieldEnd();
  }
  if (this.runtime_guid !== null && this.runtime_guid !== undefined) {
    output.writeFieldBegin('runtime_guid', Thrift.Type.STRING, 2);
    output.writeString(this.runtime_guid);
    output.writeFieldEnd();
  }
  if (this.span_guid !== null && this.span_guid !== undefined) {
    output.writeFieldBegin('span_guid', Thrift.Type.STRING, 3);
    output.writeString(this.span_guid);
    output.writeFieldEnd();
  }
  if (this.stable_name !== null && this.stable_name !== undefined) {
    output.writeFieldBegin('stable_name', Thrift.Type.STRING, 4);
    output.writeString(this.stable_name);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.STRING, 6);
    output.writeString(this.level);
    output.writeFieldEnd();
  }
  if (this.thread_id !== null && this.thread_id !== undefined) {
    output.writeFieldBegin('thread_id', Thrift.Type.I64, 7);
    output.writeI64(this.thread_id);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 8);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.line_number !== null && this.line_number !== undefined) {
    output.writeFieldBegin('line_number', Thrift.Type.I64, 9);
    output.writeI64(this.line_number);
    output.writeFieldEnd();
  }
  if (this.stack_frames !== null && this.stack_frames !== undefined) {
    output.writeFieldBegin('stack_frames', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.stack_frames.length);
    for (var iter15 in this.stack_frames)
    {
      if (this.stack_frames.hasOwnProperty(iter15))
      {
        iter15 = this.stack_frames[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.payload_json !== null && this.payload_json !== undefined) {
    output.writeFieldBegin('payload_json', Thrift.Type.STRING, 11);
    output.writeString(this.payload_json);
    output.writeFieldEnd();
  }
  if (this.error_flag !== null && this.error_flag !== undefined) {
    output.writeFieldBegin('error_flag', Thrift.Type.BOOL, 12);
    output.writeBool(this.error_flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.TraceJoinId = module.exports.TraceJoinId = function(args) {
  this.TraceKey = null;
  this.Value = null;
  if (args) {
    if (args.TraceKey !== undefined) {
      this.TraceKey = args.TraceKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field TraceKey is unset!');
    }
    if (args.Value !== undefined) {
      this.Value = args.Value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field Value is unset!');
    }
  }
};
crouton_thrift.TraceJoinId.prototype = {};
crouton_thrift.TraceJoinId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.TraceKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.TraceJoinId.prototype.write = function(output) {
  output.writeStructBegin('TraceJoinId');
  if (this.TraceKey !== null && this.TraceKey !== undefined) {
    output.writeFieldBegin('TraceKey', Thrift.Type.STRING, 1);
    output.writeString(this.TraceKey);
    output.writeFieldEnd();
  }
  if (this.Value !== null && this.Value !== undefined) {
    output.writeFieldBegin('Value', Thrift.Type.STRING, 2);
    output.writeString(this.Value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.SpanRecord = module.exports.SpanRecord = function(args) {
  this.span_guid = null;
  this.runtime_guid = null;
  this.span_name = null;
  this.join_ids = null;
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.attributes = null;
  this.error_flag = null;
  if (args) {
    if (args.span_guid !== undefined) {
      this.span_guid = args.span_guid;
    }
    if (args.runtime_guid !== undefined) {
      this.runtime_guid = args.runtime_guid;
    }
    if (args.span_name !== undefined) {
      this.span_name = args.span_name;
    }
    if (args.join_ids !== undefined) {
      this.join_ids = args.join_ids;
    }
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.error_flag !== undefined) {
      this.error_flag = args.error_flag;
    }
  }
};
crouton_thrift.SpanRecord.prototype = {};
crouton_thrift.SpanRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.span_guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.runtime_guid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.span_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.join_ids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.TraceJoinId();
          elem22.read(input);
          this.join_ids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.attributes = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.KeyValue();
          elem29.read(input);
          this.attributes.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.error_flag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.SpanRecord.prototype.write = function(output) {
  output.writeStructBegin('SpanRecord');
  if (this.span_guid !== null && this.span_guid !== undefined) {
    output.writeFieldBegin('span_guid', Thrift.Type.STRING, 1);
    output.writeString(this.span_guid);
    output.writeFieldEnd();
  }
  if (this.runtime_guid !== null && this.runtime_guid !== undefined) {
    output.writeFieldBegin('runtime_guid', Thrift.Type.STRING, 2);
    output.writeString(this.runtime_guid);
    output.writeFieldEnd();
  }
  if (this.span_name !== null && this.span_name !== undefined) {
    output.writeFieldBegin('span_name', Thrift.Type.STRING, 3);
    output.writeString(this.span_name);
    output.writeFieldEnd();
  }
  if (this.join_ids !== null && this.join_ids !== undefined) {
    output.writeFieldBegin('join_ids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.join_ids.length);
    for (var iter30 in this.join_ids)
    {
      if (this.join_ids.hasOwnProperty(iter30))
      {
        iter30 = this.join_ids[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 5);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 6);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter31 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter31))
      {
        iter31 = this.attributes[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error_flag !== null && this.error_flag !== undefined) {
    output.writeFieldBegin('error_flag', Thrift.Type.BOOL, 9);
    output.writeBool(this.error_flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Auth = module.exports.Auth = function(args) {
  this.access_token = null;
  if (args) {
    if (args.access_token !== undefined) {
      this.access_token = args.access_token;
    }
  }
};
crouton_thrift.Auth.prototype = {};
crouton_thrift.Auth.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.access_token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Auth.prototype.write = function(output) {
  output.writeStructBegin('Auth');
  if (this.access_token !== null && this.access_token !== undefined) {
    output.writeFieldBegin('access_token', Thrift.Type.STRING, 1);
    output.writeString(this.access_token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Timing = module.exports.Timing = function(args) {
  this.receive_micros = null;
  this.transmit_micros = null;
  if (args) {
    if (args.receive_micros !== undefined) {
      this.receive_micros = args.receive_micros;
    }
    if (args.transmit_micros !== undefined) {
      this.transmit_micros = args.transmit_micros;
    }
  }
};
crouton_thrift.Timing.prototype = {};
crouton_thrift.Timing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.receive_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.transmit_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Timing.prototype.write = function(output) {
  output.writeStructBegin('Timing');
  if (this.receive_micros !== null && this.receive_micros !== undefined) {
    output.writeFieldBegin('receive_micros', Thrift.Type.I64, 1);
    output.writeI64(this.receive_micros);
    output.writeFieldEnd();
  }
  if (this.transmit_micros !== null && this.transmit_micros !== undefined) {
    output.writeFieldBegin('transmit_micros', Thrift.Type.I64, 2);
    output.writeI64(this.transmit_micros);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.SampleCount = module.exports.SampleCount = function(args) {
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.count = null;
  if (args) {
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
crouton_thrift.SampleCount.prototype = {};
crouton_thrift.SampleCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.SampleCount.prototype.write = function(output) {
  output.writeStructBegin('SampleCount');
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 1);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 2);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 3);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportRequest = module.exports.ReportRequest = function(args) {
  this.runtime = null;
  this.span_records = null;
  this.log_records = null;
  this.timestamp_offset_micros = null;
  this.oldest_micros = null;
  this.youngest_micros = null;
  this.counters = null;
  if (args) {
    if (args.runtime !== undefined) {
      this.runtime = args.runtime;
    }
    if (args.span_records !== undefined) {
      this.span_records = args.span_records;
    }
    if (args.log_records !== undefined) {
      this.log_records = args.log_records;
    }
    if (args.timestamp_offset_micros !== undefined) {
      this.timestamp_offset_micros = args.timestamp_offset_micros;
    }
    if (args.oldest_micros !== undefined) {
      this.oldest_micros = args.oldest_micros;
    }
    if (args.youngest_micros !== undefined) {
      this.youngest_micros = args.youngest_micros;
    }
    if (args.counters !== undefined) {
      this.counters = args.counters;
    }
  }
};
crouton_thrift.ReportRequest.prototype = {};
crouton_thrift.ReportRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.runtime = new ttypes.Runtime();
        this.runtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.span_records = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.SpanRecord();
          elem38.read(input);
          this.span_records.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.log_records = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.LogRecord();
          elem45.read(input);
          this.log_records.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp_offset_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.oldest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.youngest_micros = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.counters = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new ttypes.NamedCounter();
          elem52.read(input);
          this.counters.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportRequest.prototype.write = function(output) {
  output.writeStructBegin('ReportRequest');
  if (this.runtime !== null && this.runtime !== undefined) {
    output.writeFieldBegin('runtime', Thrift.Type.STRUCT, 1);
    this.runtime.write(output);
    output.writeFieldEnd();
  }
  if (this.span_records !== null && this.span_records !== undefined) {
    output.writeFieldBegin('span_records', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.span_records.length);
    for (var iter53 in this.span_records)
    {
      if (this.span_records.hasOwnProperty(iter53))
      {
        iter53 = this.span_records[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.log_records !== null && this.log_records !== undefined) {
    output.writeFieldBegin('log_records', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.log_records.length);
    for (var iter54 in this.log_records)
    {
      if (this.log_records.hasOwnProperty(iter54))
      {
        iter54 = this.log_records[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp_offset_micros !== null && this.timestamp_offset_micros !== undefined) {
    output.writeFieldBegin('timestamp_offset_micros', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp_offset_micros);
    output.writeFieldEnd();
  }
  if (this.oldest_micros !== null && this.oldest_micros !== undefined) {
    output.writeFieldBegin('oldest_micros', Thrift.Type.I64, 7);
    output.writeI64(this.oldest_micros);
    output.writeFieldEnd();
  }
  if (this.youngest_micros !== null && this.youngest_micros !== undefined) {
    output.writeFieldBegin('youngest_micros', Thrift.Type.I64, 8);
    output.writeI64(this.youngest_micros);
    output.writeFieldEnd();
  }
  if (this.counters !== null && this.counters !== undefined) {
    output.writeFieldBegin('counters', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.counters.length);
    for (var iter55 in this.counters)
    {
      if (this.counters.hasOwnProperty(iter55))
      {
        iter55 = this.counters[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.Command = module.exports.Command = function(args) {
  this.disable = null;
  if (args) {
    if (args.disable !== undefined) {
      this.disable = args.disable;
    }
  }
};
crouton_thrift.Command.prototype = {};
crouton_thrift.Command.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.disable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.Command.prototype.write = function(output) {
  output.writeStructBegin('Command');
  if (this.disable !== null && this.disable !== undefined) {
    output.writeFieldBegin('disable', Thrift.Type.BOOL, 1);
    output.writeBool(this.disable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

crouton_thrift.ReportResponse = module.exports.ReportResponse = function(args) {
  this.commands = null;
  this.timing = null;
  this.errors = null;
  if (args) {
    if (args.commands !== undefined) {
      this.commands = args.commands;
    }
    if (args.timing !== undefined) {
      this.timing = args.timing;
    }
    if (args.errors !== undefined) {
      this.errors = args.errors;
    }
  }
};
crouton_thrift.ReportResponse.prototype = {};
crouton_thrift.ReportResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.commands = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Command();
          elem62.read(input);
          this.commands.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timing = new ttypes.Timing();
        this.timing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.errors = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString();
          this.errors.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

crouton_thrift.ReportResponse.prototype.write = function(output) {
  output.writeStructBegin('ReportResponse');
  if (this.commands !== null && this.commands !== undefined) {
    output.writeFieldBegin('commands', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.commands.length);
    for (var iter70 in this.commands)
    {
      if (this.commands.hasOwnProperty(iter70))
      {
        iter70 = this.commands[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timing !== null && this.timing !== undefined) {
    output.writeFieldBegin('timing', Thrift.Type.STRUCT, 2);
    this.timing.write(output);
    output.writeFieldEnd();
  }
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.errors.length);
    for (var iter71 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter71))
      {
        iter71 = this.errors[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

